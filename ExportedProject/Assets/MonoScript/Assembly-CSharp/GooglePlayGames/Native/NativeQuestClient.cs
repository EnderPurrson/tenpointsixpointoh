using GooglePlayGames.BasicApi;
using GooglePlayGames.BasicApi.Quests;
using GooglePlayGames.Native.Cwrapper;
using GooglePlayGames.Native.PInvoke;
using GooglePlayGames.OurUtils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace GooglePlayGames.Native
{
	internal class NativeQuestClient : IQuestsClient
	{
		private readonly GooglePlayGames.Native.PInvoke.QuestManager mManager;

		internal NativeQuestClient(GooglePlayGames.Native.PInvoke.QuestManager manager)
		{
			this.mManager = Misc.CheckNotNull<GooglePlayGames.Native.PInvoke.QuestManager>(manager);
		}

		public void Accept(IQuest quest, Action<QuestAcceptStatus, IQuest> callback)
		{
			Action<QuestAcceptStatus, IQuest> onGameThread = callback;
			Misc.CheckNotNull<IQuest>(quest);
			Misc.CheckNotNull<Action<QuestAcceptStatus, IQuest>>(onGameThread);
			onGameThread = CallbackUtils.ToOnGameThread<QuestAcceptStatus, IQuest>(onGameThread);
			NativeQuest nativeQuest = quest as NativeQuest;
			if (nativeQuest == null)
			{
				Logger.e("Encountered quest that was not generated by this IQuestClient");
				onGameThread(1, null);
				return;
			}
			this.mManager.Accept(nativeQuest, (GooglePlayGames.Native.PInvoke.QuestManager.AcceptResponse response) => {
				if (!response.RequestSucceeded())
				{
					onGameThread(NativeQuestClient.FromAcceptStatus(response.ResponseStatus()), null);
				}
				else
				{
					onGameThread(0, response.AcceptedQuest());
				}
			});
		}

		public void ClaimMilestone(IQuestMilestone milestone, Action<QuestClaimMilestoneStatus, IQuest, IQuestMilestone> callback)
		{
			Action<QuestClaimMilestoneStatus, IQuest, IQuestMilestone> onGameThread = callback;
			Misc.CheckNotNull<IQuestMilestone>(milestone);
			Misc.CheckNotNull<Action<QuestClaimMilestoneStatus, IQuest, IQuestMilestone>>(onGameThread);
			onGameThread = CallbackUtils.ToOnGameThread<QuestClaimMilestoneStatus, IQuest, IQuestMilestone>(onGameThread);
			NativeQuestMilestone nativeQuestMilestone = milestone as NativeQuestMilestone;
			if (nativeQuestMilestone != null)
			{
				this.mManager.ClaimMilestone(nativeQuestMilestone, (GooglePlayGames.Native.PInvoke.QuestManager.ClaimMilestoneResponse response) => {
					if (!response.RequestSucceeded())
					{
						onGameThread(NativeQuestClient.FromClaimStatus(response.ResponseStatus()), null, null);
					}
					else
					{
						onGameThread(0, response.Quest(), response.ClaimedMilestone());
					}
				});
				return;
			}
			Logger.e("Encountered milestone that was not generated by this IQuestClient");
			onGameThread(1, null, null);
		}

		public void Fetch(DataSource source, string questId, Action<ResponseStatus, IQuest> callback)
		{
			Action<ResponseStatus, IQuest> onGameThread = callback;
			Misc.CheckNotNull<string>(questId);
			Misc.CheckNotNull<Action<ResponseStatus, IQuest>>(onGameThread);
			onGameThread = CallbackUtils.ToOnGameThread<ResponseStatus, IQuest>(onGameThread);
			this.mManager.Fetch(ConversionUtils.AsDataSource(source), questId, (GooglePlayGames.Native.PInvoke.QuestManager.FetchResponse response) => {
				ResponseStatus responseStatu = ConversionUtils.ConvertResponseStatus(response.ResponseStatus());
				if (response.RequestSucceeded())
				{
					onGameThread(responseStatu, response.Data());
				}
				else
				{
					onGameThread(responseStatu, null);
				}
			});
		}

		public void FetchMatchingState(DataSource source, QuestFetchFlags flags, Action<ResponseStatus, List<IQuest>> callback)
		{
			Action<ResponseStatus, List<IQuest>> onGameThread = callback;
			Misc.CheckNotNull<Action<ResponseStatus, List<IQuest>>>(onGameThread);
			onGameThread = CallbackUtils.ToOnGameThread<ResponseStatus, List<IQuest>>(onGameThread);
			this.mManager.FetchList(ConversionUtils.AsDataSource(source), (int)flags, (GooglePlayGames.Native.PInvoke.QuestManager.FetchListResponse response) => {
				ResponseStatus responseStatu = ConversionUtils.ConvertResponseStatus(response.ResponseStatus());
				if (response.RequestSucceeded())
				{
					onGameThread(responseStatu, response.Data().Cast<IQuest>().ToList<IQuest>());
				}
				else
				{
					onGameThread(responseStatu, null);
				}
			});
		}

		private static QuestAcceptStatus FromAcceptStatus(CommonErrorStatus.QuestAcceptStatus status)
		{
			CommonErrorStatus.QuestAcceptStatus questAcceptStatu = status;
			switch (questAcceptStatu)
			{
				case CommonErrorStatus.QuestAcceptStatus.ERROR_TIMEOUT:
				{
					return QuestAcceptStatus.Timeout;
				}
				case CommonErrorStatus.QuestAcceptStatus.ERROR_NOT_AUTHORIZED:
				{
					return QuestAcceptStatus.NotAuthorized;
				}
				case CommonErrorStatus.QuestAcceptStatus.ERROR_INTERNAL:
				{
					return QuestAcceptStatus.InternalError;
				}
				case CommonErrorStatus.QuestAcceptStatus.VALID:
				{
					return QuestAcceptStatus.Success;
				}
				default:
				{
					if (questAcceptStatu == CommonErrorStatus.QuestAcceptStatus.ERROR_QUEST_NOT_STARTED)
					{
						break;
					}
					else
					{
						if (questAcceptStatu == CommonErrorStatus.QuestAcceptStatus.ERROR_QUEST_NO_LONGER_AVAILABLE)
						{
							return QuestAcceptStatus.QuestNoLongerAvailable;
						}
						Logger.e(string.Concat("Encountered unknown status: ", status));
						return QuestAcceptStatus.InternalError;
					}
				}
			}
			return QuestAcceptStatus.QuestNotStarted;
		}

		private static QuestClaimMilestoneStatus FromClaimStatus(CommonErrorStatus.QuestClaimMilestoneStatus status)
		{
			CommonErrorStatus.QuestClaimMilestoneStatus questClaimMilestoneStatu = status;
			switch (questClaimMilestoneStatu)
			{
				case CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_TIMEOUT:
				{
					return QuestClaimMilestoneStatus.Timeout;
				}
				case CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_NOT_AUTHORIZED:
				{
					return QuestClaimMilestoneStatus.NotAuthorized;
				}
				case CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_INTERNAL:
				{
					return QuestClaimMilestoneStatus.InternalError;
				}
				case CommonErrorStatus.QuestClaimMilestoneStatus.VALID:
				{
					return QuestClaimMilestoneStatus.Success;
				}
				default:
				{
					if (questClaimMilestoneStatu == CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_MILESTONE_CLAIM_FAILED)
					{
						break;
					}
					else
					{
						if (questClaimMilestoneStatu == CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_MILESTONE_ALREADY_CLAIMED)
						{
							return QuestClaimMilestoneStatus.MilestoneAlreadyClaimed;
						}
						Logger.e(string.Concat("Encountered unknown status: ", status));
						return QuestClaimMilestoneStatus.InternalError;
					}
				}
			}
			return QuestClaimMilestoneStatus.MilestoneClaimFailed;
		}

		private static Action<GooglePlayGames.Native.PInvoke.QuestManager.QuestUIResponse> FromQuestUICallback(Action<QuestUiResult, IQuest, IQuestMilestone> callback)
		{
			return (GooglePlayGames.Native.PInvoke.QuestManager.QuestUIResponse response) => {
				if (!response.RequestSucceeded())
				{
					callback(NativeQuestClient.UiErrorToQuestUiResult(response.RequestStatus()), null, null);
					return;
				}
				NativeQuest nativeQuest = response.AcceptedQuest();
				NativeQuestMilestone claim = response.MilestoneToClaim();
				if (nativeQuest != null)
				{
					callback(0, nativeQuest, null);
					claim.Dispose();
				}
				else if (claim == null)
				{
					Logger.e("Quest UI succeeded without a quest acceptance or milestone claim.");
					nativeQuest.Dispose();
					claim.Dispose();
					callback(3, null, null);
				}
				else
				{
					callback(1, null, response.MilestoneToClaim());
					nativeQuest.Dispose();
				}
			};
		}

		public void ShowAllQuestsUI(Action<QuestUiResult, IQuest, IQuestMilestone> callback)
		{
			Misc.CheckNotNull<Action<QuestUiResult, IQuest, IQuestMilestone>>(callback);
			callback = CallbackUtils.ToOnGameThread<QuestUiResult, IQuest, IQuestMilestone>(callback);
			this.mManager.ShowAllQuestUI(NativeQuestClient.FromQuestUICallback(callback));
		}

		public void ShowSpecificQuestUI(IQuest quest, Action<QuestUiResult, IQuest, IQuestMilestone> callback)
		{
			Misc.CheckNotNull<IQuest>(quest);
			Misc.CheckNotNull<Action<QuestUiResult, IQuest, IQuestMilestone>>(callback);
			callback = CallbackUtils.ToOnGameThread<QuestUiResult, IQuest, IQuestMilestone>(callback);
			NativeQuest nativeQuest = quest as NativeQuest;
			if (nativeQuest != null)
			{
				this.mManager.ShowQuestUI(nativeQuest, NativeQuestClient.FromQuestUICallback(callback));
				return;
			}
			Logger.e("Encountered quest that was not generated by this IQuestClient");
			callback(2, null, null);
		}

		private static QuestUiResult UiErrorToQuestUiResult(CommonErrorStatus.UIStatus status)
		{
			switch (status)
			{
				case CommonErrorStatus.UIStatus.ERROR_UI_BUSY:
				{
					return QuestUiResult.UiBusy;
				}
				case CommonErrorStatus.UIStatus.VALID | CommonErrorStatus.UIStatus.ERROR_UI_BUSY:
				case -10:
				case CommonErrorStatus.UIStatus.VALID | CommonErrorStatus.UIStatus.ERROR_UI_BUSY:
				case -8:
				case -7:
				{
					Logger.e(string.Concat("Unknown error status: ", status));
					return QuestUiResult.InternalError;
				}
				case CommonErrorStatus.UIStatus.ERROR_CANCELED:
				{
					return QuestUiResult.UserCanceled;
				}
				case CommonErrorStatus.UIStatus.ERROR_TIMEOUT:
				{
					return QuestUiResult.Timeout;
				}
				case CommonErrorStatus.UIStatus.ERROR_VERSION_UPDATE_REQUIRED:
				{
					return QuestUiResult.VersionUpdateRequired;
				}
				case CommonErrorStatus.UIStatus.ERROR_NOT_AUTHORIZED:
				{
					return QuestUiResult.NotAuthorized;
				}
				case CommonErrorStatus.UIStatus.ERROR_INTERNAL:
				{
					return QuestUiResult.InternalError;
				}
				default:
				{
					Logger.e(string.Concat("Unknown error status: ", status));
					return QuestUiResult.InternalError;
				}
			}
		}
	}
}